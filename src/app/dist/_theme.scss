@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
  @if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;
	$extmods: ( eot: "?", svg: "#" + str-replace($name, " ", "_"));
	$formats: (otf: "opentype", ttf: "truetype");
  @each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}
  @font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

@include font-face('GenJyuuGothic', '../../assets/font/GenJyuuGothic-Monospace-Normal', null, normal, ttf otf);
@include font-face('GenJyuuGothicBold', '../../assets/font/Gen-Jyuu-Gothic-Bold', null, normal, ttf otf);
@include font-face('GenJyuuGothicHeavy','../../assets/font/Gen-Jyuu-Gothic-Heavy', null, normal, ttf otf);
@include font-face('Lobster','../../assets/font/Lobster-Regular', null, normal, ttf otf);
@include font-face('FiraSansExtraCondensed','../../assets/font/FiraSansExtraCondensed-SemiBoldItalic', null, normal, ttf otf);
@include font-face('Karla','../../assets/font/Karla-Medium', 400, normal, ttf otf);
@include font-face('Ubuntu','../../assets/font/Ubuntu-BoldItalic', 300, normal, ttf otf);
@include font-face('NotoSansTC','../../assets/font/NotoSansTC-Regular', 300, normal, otf);
@include font-face('BebasNeue','../../assets/font/BebasNeue-Regular', null, normal, ttf otf);
@include font-face('Lato','../../assets/font/Lato-Italic', 900, normal, ttf otf);
@include font-face('AvenirNextCondBoldItalic','../../assets/font/SourceSansPro-BoldItalic', null, normal, ttf);

//color
$color-prim: #7e5f4e;
$color-sec: #bd8259;
$color-third: #f3f3f3;
$color-white: white;
$color-black: black;
$color-light-brown: #ccb0a1;
$color-trans-prim: #7e5f4eb7;
$color-trans-sec: #bd8359b7;
$color-hover-brown1: #7e5f4ee0;
$color-hover-brown2: #c49983e0;
$color-hover-prim: #fafafa;
$color-hover-sec: #fafafa44;
$color-hover-third: #eeeeeeef;

//font
$defaultFont: sans-serif;
$font-ch: GenJyuuGothic;
$font-chb: GenJyuuGothicBold;
$font-ch-bold: (BebasNeue, $font-ch);
$font-ch-morebold: (Karla, $font-chb);
$font-prim: (FiraSansExtraCondensed, AvenirNextCondBoldItalic, $font-ch);
$font-sec: (Karla, $font-ch);
$font-third: (Ubuntu,$font-ch);
$font-forth: (Lobster, $font-ch);
$font-fifth: (AvenirNextCondBoldItalic, $font-ch);

//mobile size
$btn-ms: 16px;
$logo-ms: 36px;
$padding-ms: 5em;

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-ms-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}
@mixin animation($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}
@mixin animation-delay($ani-delay) {
  -webkit-animation-delay: $ani-delay;
  -moz-animation-delay: $ani-delay;
  -o-animation-delay: $ani-delay;
  animation-delay: $ani-delay;
}
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
@mixin transition($transition) {
  -moz-transition: $transition;
  -o-transition: $transition;
  -ms-transition: $transition;
  -webkit-transition: $transition;
  transition: $transition;
}
@mixin backface-visibility($backface-visibility){
  -moz-backface-visibility: $backface-visibility;
  -o-backface-visibility: $backface-visibility;
  -ms-backface-visibility: $backface-visibility;
  -webkit-backface-visibility: $backface-visibility;
  backface-visibility: $backface-visibility;
}
@mixin perspective($perspective){
  -moz-perspective: $perspective;
  -o-perspective: $perspective;
  -ms-perspective: $perspective;
  -webkit-perspective: $perspective;
  perspective: $perspective;
}
@mixin filter($filter){
  -moz-filter: $filter;
  -o-filter: $filter;
  -ms-filter: $filter;
  -webkit-filter: $filter;
  filter: $filter;
}

@mixin text-size-adjust($value: none) {
  -webkit-text-size-adjust: $value;
  -moz-text-size-adjust: $value;
  -ms-text-size-adjust: $value;
}

// Flexbox display
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// Inline flex display
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($fg: 1, $fs: 0, $fb: auto) {

  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

   -webkit-box: $fg-boxflex;
      -moz-box: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
      -ms-flex: $fg $fs $fb;
          flex: $fg $fs $fb;
}

// Flex Flow Direction
// - applies to: flex containers
// row (default) | row-reverse | column | column-reverse
@mixin flex-direction($direction: row) {
  @if $direction == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
       -moz-box-direction: reverse;
       -moz-box-orient: horizontal;
  } @else if $direction == column {
    -webkit-box-direction: normal;
     -webkit-box-orient: vertical;
       -moz-box-direction: normal;
        -moz-box-orient: vertical;
  } @else if $direction == column-reverse {
    -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
       -moz-box-direction: reverse;
         -moz-box-orient: vertical;
  } @else {
     -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
        -moz-box-direction: normal;
       -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($value: nowrap) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($values: (row nowrap)) {
  // No Webkit/FF Box fallback.
  -webkit-flex-flow: $values;
      -ms-flex-flow: $values;
          flex-flow: $values;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
     -moz-box-ordinal-group: $int + 1;
              -webkit-order: $int;
             -ms-flex-order: $int;
                      order: $int;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($int: 1) {
   -webkit-box-flex: $int;
      -moz-box-flex: $int;
  -webkit-flex-grow: $int;
           -ms-flex: $int;
          flex-grow: $int;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
     -moz-flex-shrink: $int;
             -ms-flex: $int;
          flex-shrink: $int;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
          flex-basis: $value;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
       -moz-box-pack: start;
       -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
       -moz-box-pack: end;
       -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
       -moz-box-pack: justify;
       -ms-flex-pack: justify;
  } @else if $value == space-around {
       -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
       -moz-box-pack: $value;
       -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
          justify-content: $value;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
       -moz-box-align: start;
       -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
       -moz-box-align: end;
       -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
       -moz-box-align: $value;
       -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
          align-items: $value;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}
